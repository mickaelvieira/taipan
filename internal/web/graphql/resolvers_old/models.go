// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package resolvers

import (
	"fmt"
	"io"
	"strconv"
)

type Event interface {
	IsEvent()
}

type FeedItem interface {
	IsFeedItem()
}

type FeedResults interface {
	IsFeedResults()
}

type Node interface {
	IsNode()
}

type AppInfo struct {
	Name    string `json:"name"`
	Version string `json:"version"`
}

type AppQuery struct {
	Info *AppInfo `json:"info"`
}

type Bookmark struct {
	ID          string  `json:"id"`
	User        *User   `json:"user"`
	URL         string  `json:"url"`
	Lang        string  `json:"lang"`
	Charset     string  `json:"charset"`
	Title       string  `json:"title"`
	Description string  `json:"description"`
	Image       *Image  `json:"image"`
	Source      *Source `json:"source"`
	UpdatedAt   string  `json:"updatedAt"`
	AddedAt     string  `json:"addedAt"`
	FavoritedAt *string `json:"favoritedAt"`
	IsFavorite  bool    `json:"isFavorite"`
}

func (Bookmark) IsNode()     {}
func (Bookmark) IsFeedItem() {}

type BookmarkEvent struct {
	Emitter string    `json:"emitter"`
	Item    *Bookmark `json:"item"`
	Topic   Topic     `json:"topic"`
	Action  Action    `json:"action"`
}

func (BookmarkEvent) IsEvent() {}

type BookmarkSearchInput struct {
	Terms []string `json:"terms"`
}

type BookmarkSearchResults struct {
	Offset  int         `json:"offset"`
	Total   int         `json:"total"`
	Limit   int         `json:"limit"`
	Results []*Bookmark `json:"results"`
}

type BookmarksMutation struct {
	Create     *Bookmark `json:"create"`
	Add        *Bookmark `json:"add"`
	Remove     *Document `json:"remove"`
	Favorite   *Bookmark `json:"favorite"`
	Unfavorite *Bookmark `json:"unfavorite"`
}

type BookmarksQuery struct {
	Bookmark *Bookmark              `json:"bookmark"`
	Search   *BookmarkSearchResults `json:"search"`
}

type BotQuery struct {
	Logs *HTTPClientLogCollection `json:"logs"`
}

type CursorPaginationInput struct {
	From  *string `json:"from"`
	To    *string `json:"to"`
	Limit *int    `json:"limit"`
}

type Document struct {
	ID          string           `json:"id"`
	URL         string           `json:"url"`
	Lang        string           `json:"lang"`
	Charset     string           `json:"charset"`
	Title       string           `json:"title"`
	Description string           `json:"description"`
	Image       *Image           `json:"image"`
	Source      *Source          `json:"source"`
	CreatedAt   string           `json:"createdAt"`
	UpdatedAt   string           `json:"updatedAt"`
	LogEntries  []*HTTPClientLog `json:"logEntries"`
	Syndication []*Source        `json:"syndication"`
}

func (Document) IsNode()     {}
func (Document) IsFeedItem() {}

type DocumentCollection struct {
	First   string      `json:"first"`
	Last    string      `json:"last"`
	Total   int         `json:"total"`
	Limit   int         `json:"limit"`
	Results []*Document `json:"results"`
}

type DocumentEvent struct {
	Emitter string    `json:"emitter"`
	Item    *Document `json:"item"`
	Topic   Topic     `json:"topic"`
	Action  Action    `json:"action"`
}

func (DocumentEvent) IsEvent() {}

type DocumentMutation struct {
	Create *Document `json:"create"`
}

type DocumentSearchInput struct {
	Terms []string `json:"terms"`
}

type DocumentSearchResults struct {
	Offset  int         `json:"offset"`
	Total   int         `json:"total"`
	Limit   int         `json:"limit"`
	Results []*Document `json:"results"`
}

type DocumentsQuery struct {
	Documents *DocumentCollection    `json:"documents"`
	Search    *DocumentSearchResults `json:"search"`
}

type Email struct {
	ID          string  `json:"id"`
	Value       string  `json:"value"`
	IsPrimary   bool    `json:"isPrimary"`
	IsConfirmed bool    `json:"isConfirmed"`
	CreatedAt   string  `json:"createdAt"`
	UpdatedAt   string  `json:"updatedAt"`
	ConfirmedAt *string `json:"confirmedAt"`
}

func (Email) IsNode() {}

type FeedBookmarkResults struct {
	First   string      `json:"first"`
	Last    string      `json:"last"`
	Total   int         `json:"total"`
	Limit   int         `json:"limit"`
	Results []*Bookmark `json:"results"`
}

func (FeedBookmarkResults) IsFeedResults() {}

type FeedDocumentResults struct {
	First   string      `json:"first"`
	Last    string      `json:"last"`
	Total   int         `json:"total"`
	Limit   int         `json:"limit"`
	Results []*Document `json:"results"`
}

func (FeedDocumentResults) IsFeedResults() {}

type FeedsQuery struct {
	News        *FeedDocumentResults `json:"news"`
	LatestNews  *FeedDocumentResults `json:"latestNews"`
	Favorites   *FeedBookmarkResults `json:"favorites"`
	ReadingList *FeedBookmarkResults `json:"readingList"`
}

type HTTPClientLog struct {
	ID            string `json:"id"`
	Checksum      string `json:"checksum"`
	RequestURI    string `json:"requestURI"`
	RequestMethod string `json:"requestMethod"`
	HasFailed     bool   `json:"hasFailed"`
	FailureReason string `json:"failureReason"`
	StatusCode    int    `json:"statusCode"`
	ContentType   string `json:"contentType"`
	CreatedAt     string `json:"createdAt"`
}

func (HTTPClientLog) IsNode() {}

type HTTPClientLogCollection struct {
	Offset  int              `json:"offset"`
	Total   int              `json:"total"`
	Limit   int              `json:"limit"`
	Results []*HTTPClientLog `json:"results"`
}

type Image struct {
	Name   string `json:"name"`
	URL    string `json:"url"`
	Width  int    `json:"width"`
	Height int    `json:"height"`
	Format string `json:"format"`
}

type OffsetPaginationInput struct {
	Offset *int `json:"offset"`
	Limit  *int `json:"limit"`
}

type SearchSourcesInput struct {
	IsPaused bool `json:"isPaused"`
}

type Source struct {
	ID         string           `json:"id"`
	URL        string           `json:"url"`
	Domain     *string          `json:"domain"`
	Type       string           `json:"type"`
	Title      string           `json:"title"`
	Frequency  string           `json:"frequency"`
	IsPaused   bool             `json:"isPaused"`
	IsDeleted  bool             `json:"isDeleted"`
	CreatedAt  string           `json:"createdAt"`
	UpdatedAt  string           `json:"updatedAt"`
	ParsedAt   *string          `json:"parsedAt"`
	LogEntries []*HTTPClientLog `json:"logEntries"`
}

func (Source) IsNode() {}

type SourceCollection struct {
	Offset  int       `json:"offset"`
	Total   int       `json:"total"`
	Limit   int       `json:"limit"`
	Results []*Source `json:"results"`
}

type SubscriptionCollection struct {
	Offset  int                 `json:"offset"`
	Total   int                 `json:"total"`
	Limit   int                 `json:"limit"`
	Results []*UserSubscription `json:"results"`
}

type SubscriptionSearchInput struct {
	Terms       []string `json:"terms"`
	ShowDeleted bool     `json:"showDeleted"`
	PausedOnly  bool     `json:"pausedOnly"`
}

type SubscriptionsMutation struct {
	Subscription *UserSubscription `json:"subscription"`
	Subscribe    *UserSubscription `json:"subscribe"`
	Unsubscribe  *UserSubscription `json:"unsubscribe"`
}

type SubscriptionsQuery struct {
	Subscriptions *SubscriptionCollection `json:"subscriptions"`
}

type SyndicationMutation struct {
	Create      *Source `json:"create"`
	UpdateTitle *Source `json:"updateTitle"`
	Resume      *Source `json:"resume"`
	Pause       *Source `json:"pause"`
	Enable      *Source `json:"enable"`
	Disable     *Source `json:"disable"`
}

type SyndicationQuery struct {
	Source  *Source           `json:"source"`
	Sources *SourceCollection `json:"sources"`
}

type User struct {
	ID        string     `json:"id"`
	Firstname string     `json:"firstname"`
	Lastname  string     `json:"lastname"`
	Emails    []*Email   `json:"emails"`
	Theme     string     `json:"theme"`
	Image     *Image     `json:"image"`
	Stats     *UserStats `json:"stats"`
	CreatedAt string     `json:"createdAt"`
	UpdatedAt string     `json:"updatedAt"`
}

func (User) IsNode() {}

type UserEvent struct {
	Emitter string `json:"emitter"`
	Item    *User  `json:"item"`
	Topic   Topic  `json:"topic"`
	Action  Action `json:"action"`
}

func (UserEvent) IsEvent() {}

type UserInput struct {
	Firstname string `json:"firstname"`
	Lastname  string `json:"lastname"`
	Image     string `json:"image"`
}

type UserStats struct {
	ID            string `json:"id"`
	Bookmarks     int    `json:"bookmarks"`
	Favorites     int    `json:"favorites"`
	ReadingList   int    `json:"readingList"`
	Subscriptions int    `json:"subscriptions"`
}

func (UserStats) IsNode() {}

type UserSubscription struct {
	ID           string  `json:"id"`
	URL          string  `json:"url"`
	Domain       *string `json:"domain"`
	Type         string  `json:"type"`
	Title        string  `json:"title"`
	IsSubscribed bool    `json:"isSubscribed"`
	Frequency    string  `json:"frequency"`
	CreatedAt    *string `json:"createdAt"`
	UpdatedAt    *string `json:"updatedAt"`
	User         *User   `json:"user"`
}

func (UserSubscription) IsNode() {}

type UsersMutation struct {
	Update       *User `json:"update"`
	Password     bool  `json:"password"`
	CreateEmail  *User `json:"createEmail"`
	DeleteEmail  *User `json:"deleteEmail"`
	PrimaryEmail *User `json:"primaryEmail"`
	Theme        *User `json:"theme"`
}

type UsersQuery struct {
	LoggedIn *User `json:"loggedIn"`
}

type Action string

const (
	ActionAdd        Action = "add"
	ActionUpdate     Action = "update"
	ActionRemove     Action = "remove"
	ActionFavorite   Action = "favorite"
	ActionUnfavorite Action = "unfavorite"
	ActionBookmark   Action = "bookmark"
	ActionUnbookmark Action = "unbookmark"
)

var AllAction = []Action{
	ActionAdd,
	ActionUpdate,
	ActionRemove,
	ActionFavorite,
	ActionUnfavorite,
	ActionBookmark,
	ActionUnbookmark,
}

func (e Action) IsValid() bool {
	switch e {
	case ActionAdd, ActionUpdate, ActionRemove, ActionFavorite, ActionUnfavorite, ActionBookmark, ActionUnbookmark:
		return true
	}
	return false
}

func (e Action) String() string {
	return string(e)
}

func (e *Action) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Action(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Action", str)
	}
	return nil
}

func (e Action) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Topic string

const (
	TopicUser     Topic = "user"
	TopicDocument Topic = "document"
	TopicBookmark Topic = "bookmark"
)

var AllTopic = []Topic{
	TopicUser,
	TopicDocument,
	TopicBookmark,
}

func (e Topic) IsValid() bool {
	switch e {
	case TopicUser, TopicDocument, TopicBookmark:
		return true
	}
	return false
}

func (e Topic) String() string {
	return string(e)
}

func (e *Topic) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Topic(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Topic", str)
	}
	return nil
}

func (e Topic) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
