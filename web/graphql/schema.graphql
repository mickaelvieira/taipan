
# Custom scalars
scalar URL
scalar DateTime

# Schema
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  User(): User
  GetBookmark(url: URL!): Bookmark
  News(pagination: CursorPaginationInput!): FeedDocumentResults
  LatestNews(pagination: CursorPaginationInput!): FeedDocumentResults
  GetFavorites(pagination: CursorPaginationInput!): FeedBookmarkResults
  GetReadingList(pagination: CursorPaginationInput!): FeedBookmarkResults
  Feeds(pagination: OffsetPaginationInput!): FeedCollection
  Documents(pagination: CursorPaginationInput!): DocumentCollection
}

type Mutation {
  Feed(url: URL!): Feed
  CreateBookmark(url: URL!): Bookmark
  Bookmark(url: URL!, isRead: Boolean!): Bookmark
  Unbookmark(url: URL!): Document
  ChangeBookmarkReadStatus(url: URL!, isRead: Boolean!): Bookmark
}

type Subscription {
  NewsFeed(): DocumentEvent!
  FavoritesFeed(): BookmarkEvent!
  ReadingListFeed(): BookmarkEvent!
}

# Custom Input Types
input CursorPaginationInput {
  from: String
  to: String
  limit: Int
}

input OffsetPaginationInput {
  offset: Int
  limit: Int
}

# Base Entities
interface Node {
  id: ID!
}

type User implements Node {
  id: ID!
  firstname: String!
  lastname: String!
  username: String!
}

type Image {
  name: String!
  url: URL!
  width: Int!
  height: Int!
  format: String!
}

type Document implements Node {
  id: ID!
  url: URL!
  lang: String!
  charset: String!
  title: String!
  description: String!
  image: Image
  createdAt: DateTime!
  updatedAt: DateTime!
  logEntries: [HTTPClientLog]
}

type Bookmark implements Node {
  id: ID!
  url: URL!
  lang: String!
  charset: String!
  title: String!
  description: String!
  image: Image
  updatedAt: DateTime!
  addedAt: DateTime!
  isRead: Boolean!
}

type Feed implements Node {
  id: ID!
  url: URL!
  type: String!
  title: String!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  parsedAt: DateTime!
  logEntries: [HTTPClientLog]
}

type HTTPClientLog implements Node {
  id: ID!
  checksum: String!
  requestURI: URL!
  finalURI: URL!
  statusCode: Int!
  contentType: String!
  createdAt: DateTime!
}

type DocumentCollection {
  first: String!
  last: String!
  total: Int!
  limit: Int!
  results: [Document!]!
}

type FeedCollection {
  offset: Int!
  total: Int!
  limit: Int!
  results: [Feed!]!
}

# NewsFeed, ReadingListFeed and FavoritesFeed
union FeedItem = Bookmark | Document

interface FeedResults {
  first: String!
  last: String!
  total: Int!
  limit: Int!
  results: [FeedItem!]!
}

type FeedDocumentResults implements FeedResults {
  first: String!
  last: String!
  total: Int!
  limit: Int!
  results: [Document!]!
}

type FeedBookmarkResults implements FeedResults {
  first: String!
  last: String!
  total: Int!
  limit: Int!
  results: [Bookmark!]!
}

# Feeds Subscription
# @TODO I need to double check those enums
enum FeedTopic {
  News
  Favorites
  ReadingList
}

enum FeedAction {
  Add
  Remove
}

interface FeedEvent {
  id: String!
  item: FeedItem!
  topic: FeedTopic!
  action: FeedAction!
}

type DocumentEvent implements FeedEvent {
  id: String!
  item: Document!
  topic: FeedTopic!
  action: FeedAction!
}

type BookmarkEvent implements FeedEvent {
  id: String!
  item: Bookmark!
  topic: FeedTopic!
  action: FeedAction!
}
