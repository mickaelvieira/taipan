schema {
  query: Query
  mutation: Mutation
}

type Query {
  GetBookmark(id: ID!): Bookmark
  GetLatestBookmarks(offset: Int, limit: Int): BookmarkCollection
}

type Mutation {
  # CreateBookmark(url: String!): UserBookmark
  # DeleteBookmark(id: ID!): Boolean
  # MarkBookmarkAsRead(id: ID!): Bookmark
  # MarkBookmarkAsUnread(id: ID!): Bookmark
  # RefreshBookmark(id: ID!): Bookmark
}

interface Node {
  id: ID!
}

enum BookmarkStatus {
  FETCHED
  PENDING
  FETCHING
  FAILED
}

# https://www.apollographql.com/docs/graphql-tools/scalars

type Bookmark implements Node {
  id: ID!
  url: String!
  hash: String!
  title: String!
  description: String!
  status: BookmarkStatus!
  createdAt: String!
  updatedAt: String!
}

type UserBookmark implements Node {
  id: ID!
  url: String!
  hash: String!
  title: String!
  description: String!
  status: BookmarkStatus!
  createdAt: String!
  updatedAt: String!
  addedAt: String!
  isRead: Boolean!
}

type BookmarkCollection {
  total: Int!
  offset: Int!
  limit: Int!
  results: [Bookmark]
}
