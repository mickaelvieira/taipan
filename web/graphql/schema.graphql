schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  User(): User
  GetBookmark(url: String!): Bookmark
  News(pagination: CursorPaginationInput!): DocumentCollection
  GetFavorites(pagination: CursorPaginationInput!): BookmarkCollection
  GetReadingList(pagination: CursorPaginationInput!): BookmarkCollection
  Feeds(pagination: OffsetPaginationInput!): FeedCollection
  Documents(pagination: CursorPaginationInput!): DocumentCollection
}

type Mutation {
  Feed(url: String!): Feed
  Bookmark(url: String!): Bookmark
  Unbookmark(url: String!): Document
  ChangeBookmarkReadStatus(url: String!, isRead: Boolean!): Bookmark
}

type Subscription {
  LatestFavorite(): BookmarkEvent!
  LatestReadingList(): BookmarkEvent!
}

type BookmarkEvent {
  id: String!
  bookmark: Bookmark!
  topic: String!
  action: String!
}

# @TODO Remove this status
enum BookmarkStatus {
  FETCHED
  PENDING
  FETCHING
  FAILED
}

# https://www.apollographql.com/docs/graphql-tools/scalars

input CursorPaginationInput {
  from: String
  to: String
  limit: Int
}

input OffsetPaginationInput {
  offset: Int
  limit: Int
}

type DocumentCollection {
  first: String!
  last: String!
  total: Int!
  limit: Int!
  results: [Document]
}

type BookmarkCollection {
  first: String!
  last: String!
  total: Int!
  limit: Int!
  results: [Bookmark]
}

type FeedCollection {
  offset: Int!
  total: Int!
  limit: Int!
  results: [Feed]
}

interface Node {
  id: ID!
}

type User implements Node {
  id: ID!
  firstname: String!
  lastname: String!
  username: String!
}

type Image {
  name: String!
  url: String!
  width: Int!
  height: Int!
  format: String!
}

type Document implements Node {
  id: ID!
  url: String!
  lang: String!
  charset: String!
  title: String!
  description: String!
  image: Image
  createdAt: String!
  updatedAt: String!
  logEntries: [HTTPClientLog]
}

type Bookmark implements Node {
  id: ID!
  url: String!
  lang: String!
  charset: String!
  title: String!
  description: String!
  image: Image
  updatedAt: String!
  addedAt: String!
  isRead: Boolean!
}

type Feed implements Node {
  id: ID!
  url: String!
  type: String!
  title: String!
  status: String!
  createdAt: String!
  updatedAt: String!
  parsedAt: String!
  logEntries: [HTTPClientLog]
}

type HTTPClientLog implements Node {
  id: ID!
  checksum: String!
  requestURI: String!
  finalURI: String!
  statusCode: Int!
  contentType: String!
  createdAt: String!
}